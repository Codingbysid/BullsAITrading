#!/usr/bin/env python3
"""
QuantAI Trading Platform - Simple Launcher

This script provides a simple way to run the QuantAI Trading Platform
without import issues.
"""

import sys
import os
from pathlib import Path

# Add current directory to Python path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / 'src'))

def run_demo():
    """Run demo mode showing platform capabilities"""
    print("üöÄ QuantAI Trading Platform - Demo Mode")
    print("=" * 60)
    print()
    
    print("üéØ FOCUSED 5-TICKER STRATEGY:")
    print("   üìä AMZN - Amazon (Consumer Discretionary)")
    print("   üìä META - Meta (Communication Services)")
    print("   üìä NVDA - NVIDIA (Technology)")
    print("   üìä GOOGL - Alphabet (Communication Services)")
    print("   üìä AAPL - Apple (Technology)")
    print()
    
    print("ü§ñ AI-POWERED FEATURES:")
    print("   üß† Multi-Model Ensemble (Random Forest, XGBoost, LSTM, RL)")
    print("   üìà Advanced Feature Engineering (50+ technical indicators)")
    print("   üìä Sentiment Analysis (News API, Gemini AI)")
    print("   üîÑ Regime Detection and Volatility Forecasting")
    print()
    
    print("üìä BACKTESTING SYSTEMS:")
    print("   üéØ Simple Backtester (Fast, no dependencies)")
    print("   üéØ Standalone Backtester (Advanced)")
    print("   üéØ QF-Lib Backtester (Event-driven) - Requires qf_env")
    print("   üéØ Advanced Quantitative Backtester (Research-grade)")
    print("   üéØ Focused 5-Ticker Backtester (Production-ready)")
    print()
    
    print("üêç QF-LIB ENVIRONMENT:")
    print("   conda activate qf_env")
    print("   python scripts/run_qf_backtest.py")
    print("   python scripts/test_qf_env.py")
    print()
    
    print("üíº PORTFOLIO MANAGEMENT:")
    print("   üë§ User Authentication with PBKDF2-SHA256")
    print("   üíº Real-time Portfolio Tracking")
    print("   ü§ñ AI Recommendations with confidence scoring")
    print("   üîÑ Reinforcement Learning from user feedback")
    print("   üéØ Personalization based on user behavior")
    print("   üõ°Ô∏è Enterprise-grade security")
    print()
    
    print("üõ°Ô∏è RISK MANAGEMENT:")
    print("   üìä Kelly Criterion for optimal position sizing")
    print("   üìà VaR Analysis (95% and 99% confidence levels)")
    print("   üìâ Maximum Drawdown monitoring")
    print("   üéØ Portfolio Optimization with constraints")
    print()
    
    print("üìà PERFORMANCE METRICS:")
    print("   üéØ Recommendation Accuracy: >65%")
    print("   üë• User Acceptance Rate: >40%")
    print("   ‚ö° Response Time: <500ms")
    print("   üß† Learning Improvement: 30 days")
    print()
    
    print("üöÄ USAGE COMMANDS:")
    print("   # Run backtesting systems")
    print("   python apps/backtesting/backtesters/simple_backtest.py")
    print("   python apps/backtesting/backtesters/focused_5_ticker_backtester.py")
    print()
    print("   # Run original applications")
    print("   python apps/trading/main.py")
    print("   python apps/trading/focused_quantai_main.py summary")
    print()
    
    print("üéâ QUANTAI TRADING PLATFORM READY!")
    print("   Advanced AI-driven quantitative trading")
    print("   Interactive portfolio management")
    print("   Reinforcement learning system")
    print("   Enterprise-grade security")
    print("   Production-ready architecture")

def run_backtest():
    """Run a simple backtest"""
    print("üìä Running Simple Backtest...")
    try:
        # Try to run the simple backtest
        import subprocess
        result = subprocess.run([
            sys.executable, 
            "apps/backtesting/backtesters/simple_backtest.py"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Backtest completed successfully!")
            print(result.stdout)
        else:
            print("‚ùå Backtest failed:")
            print(result.stderr)
    except Exception as e:
        print(f"‚ùå Error running backtest: {e}")
        print("üîÑ This is expected if dependencies are not installed")

def run_qf_backtest():
    """Run QF-Lib backtester in qf_env environment"""
    print("üéØ QuantAI Trading Platform - QF-Lib Backtester")
    print("=" * 60)
    print()
    
    print("üêç QF-LIB ENVIRONMENT REQUIRED:")
    print("   conda activate qf_env")
    print()
    
    print("üöÄ RUNNING QF-LIB BACKTESTER:")
    print("   python scripts/run_qf_backtest.py")
    print()
    
    # Try to run the QF-Lib backtester
    try:
        import subprocess
        result = subprocess.run([
            'python', 'scripts/run_qf_backtest.py'
        ], check=True)
        print("‚úÖ QF-Lib backtester completed successfully!")
    except subprocess.CalledProcessError:
        print("‚ùå QF-Lib backtester failed")
        print("Please ensure qf_env is activated: conda activate qf_env")
    except FileNotFoundError:
        print("‚ùå QF-Lib runner script not found")
        print("Please check the scripts/run_qf_backtest.py file")

def main():
    """Main entry point"""
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "demo":
            run_demo()
        elif mode == "backtest":
            run_backtest()
        elif mode == "qf":
            run_qf_backtest()
        else:
            print("‚ùå Unknown mode. Use 'demo', 'backtest', or 'qf'")
    else:
        print("üöÄ QuantAI Trading Platform")
        print("Usage:")
        print("  python run_quantai.py demo     # Show demo")
        print("  python run_quantai.py backtest # Run backtest")
        print("  python run_quantai.py qf       # Run QF-Lib backtester")
        print()
        print("Or run directly:")
        print("  python apps/backtesting/backtesters/simple_backtest.py")
        print("  conda activate qf_env && python scripts/run_qf_backtest.py")

if __name__ == "__main__":
    main()
